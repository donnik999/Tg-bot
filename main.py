import asyncio
import re
import sqlite3
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command
from aiogram.types import (
    Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from datetime import datetime

API_TOKEN = '8099941356:AAFyHCfCt4jVkmXQqdIC3kufKj5f0Wg969o'  # <-- –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω!
ADMIN_ID = 6712617550  # <-- –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π user_id!

bot = Bot(API_TOKEN)
dp = Dispatcher()

# --- FSM ---
class RegStates(StatesGroup):
    waiting_for_nick = State()
    editing_nick = State()
    creating_announcement_title = State()
    creating_announcement_text = State()


# --- DB ---
def db_connect():
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    # Users
    c.execute('CREATE TABLE IF NOT EXISTS users (user_id INTEGER PRIMARY KEY, nickname TEXT, username TEXT)')
    # Admins
    c.execute('CREATE TABLE IF NOT EXISTS admins (user_id INTEGER PRIMARY KEY)')
    # Announcements
    c.execute('''CREATE TABLE IF NOT EXISTS announcements (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        title TEXT,
        text TEXT,
        creator_id INTEGER,
        created_at TEXT
    )''')
    # User responses to announcements
    c.execute('''CREATE TABLE IF NOT EXISTS announcement_responses (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        announcement_id INTEGER,
        user_id INTEGER,
        status TEXT CHECK(status IN ('ready','not_ready')),
        UNIQUE(announcement_id, user_id)
    )''')
    conn.commit()
    return conn, c

def is_admin(user_id):
    if user_id == ADMIN_ID:
        return True
    conn, c = db_connect()
    c.execute('SELECT user_id FROM admins WHERE user_id=?', (user_id,))
    result = c.fetchone()
    conn.close()
    return bool(result)

def add_admin(user_id):
    conn, c = db_connect()
    c.execute('INSERT OR IGNORE INTO admins (user_id) VALUES (?)', (user_id,))
    conn.commit()
    conn.close()

def remove_admin(user_id):
    if user_id == ADMIN_ID:
        return
    conn, c = db_connect()
    c.execute('DELETE FROM admins WHERE user_id=?', (user_id,))
    conn.commit()
    conn.close()

def is_valid_nick(nick):
    return bool(re.fullmatch(r'[A-Za-z0-9]+_[A-Za-z0-9]+', nick))

# --- Keyboards ---
def main_menu(is_admin=False):
    kb = [
        [KeyboardButton(text="üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")],
        [KeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º")],
        [KeyboardButton(text="üë• –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ —Å –Ω–∏–∫–Ω–µ–π–º–æ–º")]
    ]
    if is_admin:
        kb.append([KeyboardButton(text="üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ")])
        kb.append([KeyboardButton(text="üìÑ –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")])
        kb.append([KeyboardButton(text="üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")])
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

def cancel_menu():
    kb = [[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

def admin_menu():
    kb = [
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞")],
        [KeyboardButton(text="‚ûñ –°–Ω—è—Ç—å –∞–¥–º–∏–Ω–∞")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
    ]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

def announcement_response_kb(announcement_id):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤", callback_data=f"ready_{announcement_id}"),
                InlineKeyboardButton(text="‚ùå –ù–µ –≥–æ—Ç–æ–≤", callback_data=f"notready_{announcement_id}")
            ]
        ]
    )

def announcements_pagination_kb(page, total):
    btns = []
    if page > 1:
        btns.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"ann_page_{page-1}"))
    if page < total:
        btns.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"ann_page_{page+1}"))
    return InlineKeyboardMarkup(inline_keyboard=[btns]) if btns else None

# --- Handlers ---

@dp.message(Command("start"))
async def on_start(message: Message, state: FSMContext):
    await state.clear()
    # Welcome picture and text
    photo = FSInputFile("welcome.jpg")
    await message.answer_photo(
        photo,
        caption=(
            "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BIZWAR BOT!</b>\n\n"
            "üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è, —á—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∏–≥—Ä–∞—Ö!\n\n"
            "<i>–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –º–µ–Ω—é –Ω–∏–∂–µ. –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.</i>"
        ),
        parse_mode='HTML'
    )
    await message.answer(
        "üìã <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</b>",
        reply_markup=main_menu(is_admin=is_admin(message.from_user.id)),
        parse_mode="HTML"
    )

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ---
@dp.message(F.text == "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
async def registration_start(message: Message, state: FSMContext):
    await state.set_state(RegStates.waiting_for_nick)
    await message.answer(
        "‚úçÔ∏è <b>–í–≤–µ–¥–∏ –Ω–∏–∫–Ω–µ–π–º</b> –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>–ò–º—è_–§–∞–º–∏–ª–∏—è</code> (–ª–∞—Ç–∏–Ω–∏—Ü–∞, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ _):",
        parse_mode='HTML',
        reply_markup=cancel_menu()
    )

@dp.message(RegStates.waiting_for_nick)
async def registration_finish(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await on_start(message, state)
        return
    nickname = message.text.strip()
    if not is_valid_nick(nickname):
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞!</b> –ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>–ò–º—è_–§–∞–º–∏–ª–∏—è</code> –ª–∞—Ç–∏–Ω–∏—Ü–µ–π. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏ '–û—Ç–º–µ–Ω–∞'.",
            parse_mode='HTML'
        )
        return
    conn, c = db_connect()
    c.execute(
        'INSERT OR REPLACE INTO users (user_id, nickname, username) VALUES (?, ?, ?)',
        (message.from_user.id, nickname, message.from_user.username or "")
    )
    conn.commit()
    conn.close()
    await message.answer(
        f"‚úÖ <b>–ù–∏–∫–Ω–µ–π–º {nickname} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!</b>",
        parse_mode='HTML',
        reply_markup=main_menu(is_admin=is_admin(message.from_user.id))
    )
    await state.clear()

# --- –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º ---
@dp.message(F.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º")
async def edit_nick_start(message: Message, state: FSMContext):
    await state.set_state(RegStates.editing_nick)
    await message.answer(
        "‚úçÔ∏è <b>–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º</b> –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>–ò–º—è_–§–∞–º–∏–ª–∏—è</code> (–ª–∞—Ç–∏–Ω–∏—Ü–∞, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ _):",
        parse_mode='HTML',
        reply_markup=cancel_menu()
    )

@dp.message(RegStates.editing_nick)
async def edit_nick_finish(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await on_start(message, state)
        return
    nickname = message.text.strip()
    if not is_valid_nick(nickname):
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞!</b> –ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>–ò–º—è_–§–∞–º–∏–ª–∏—è</code> –ª–∞—Ç–∏–Ω–∏—Ü–µ–π. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏ '–û—Ç–º–µ–Ω–∞'.",
            parse_mode='HTML'
        )
        return
    conn, c = db_connect()
    c.execute(
        'UPDATE users SET nickname=?, username=? WHERE user_id=?',
        (nickname, message.from_user.username or "", message.from_user.id)
    )
    conn.commit()
    conn.close()
    await message.answer(
        f"‚úÖ <b>–ù–∏–∫–Ω–µ–π–º –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {nickname}!</b>",
        parse_mode='HTML',
        reply_markup=main_menu(is_admin=is_admin(message.from_user.id))
    )
    await state.clear()

# --- –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ —Å –Ω–∏–∫–Ω–µ–π–º–æ–º ---
@dp.message(F.text == "üë• –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ —Å –Ω–∏–∫–Ω–µ–π–º–æ–º")
async def list_players(message: Message, state: FSMContext):
    conn, c = db_connect()
    c.execute("SELECT nickname, username, user_id FROM users WHERE nickname IS NOT NULL AND nickname != ''")
    rows = c.fetchall()
    conn.close()
    if not rows:
        await message.answer("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        return
    msg = "üë• <b>–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤:</b>\n"
    msg += "\n".join(
        [f"<b>{row[0]}</b> | @{row[1] or '–Ω–µ—Ç'} | <code>{row[2]}</code>" for row in rows]
    )
    await message.answer(msg, parse_mode='HTML')

# --- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ---
@dp.message(F.text == "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await state.clear()
    await message.answer("üõ† <b>–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>", reply_markup=admin_menu(), parse_mode="HTML")

@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞")
async def add_admin_start(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await message.answer("–í–≤–µ–¥–∏ user_id –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω—ã:", reply_markup=cancel_menu())
    await state.set_state("adding_admin")

@dp.message(F.text == "‚ûñ –°–Ω—è—Ç—å –∞–¥–º–∏–Ω–∞")
async def remove_admin_start(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await message.answer("–í–≤–µ–¥–∏ user_id –¥–ª—è —Å–Ω—è—Ç–∏—è –∏–∑ –∞–¥–º–∏–Ω–æ–≤:", reply_markup=cancel_menu())
    await state.set_state("removing_admin")

@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def back_from_admin(message: Message, state: FSMContext):
    await on_start(message, state)

@dp.message(state="adding_admin")
async def add_admin_finish(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await admin_panel(message, state)
        return
    try:
        user_id = int(message.text.strip())
        add_admin(user_id)
        await message.answer(f"‚úÖ –ê–¥–º–∏–Ω {user_id} –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=admin_menu())
        await state.clear()
    except Exception:
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏ —á–∏—Å–ª–æ–≤–æ–π user_id –∏–ª–∏ '–û—Ç–º–µ–Ω–∞'.", reply_markup=cancel_menu())

@dp.message(state="removing_admin")
async def remove_admin_finish(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await admin_panel(message, state)
        return
    try:
        user_id = int(message.text.strip())
        remove_admin(user_id)
        await message.answer(f"‚úÖ –ê–¥–º–∏–Ω {user_id} —Å–Ω—è—Ç.", reply_markup=admin_menu())
        await state.clear()
    except Exception:
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏ —á–∏—Å–ª–æ–≤–æ–π user_id –∏–ª–∏ '–û—Ç–º–µ–Ω–∞'.", reply_markup=cancel_menu())

# --- –û–±—ä—è–≤–ª–µ–Ω–∏—è ---
@dp.message(F.text == "üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ")
async def ann_create_title(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await state.set_state(RegStates.creating_announcement_title)
    await message.answer("üìù <b>–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:</b>", parse_mode="HTML", reply_markup=cancel_menu())

@dp.message(RegStates.creating_announcement_title)
async def ann_create_text(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await on_start(message, state)
        return
    await state.update_data(title=message.text.strip())
    await state.set_state(RegStates.creating_announcement_text)
    await message.answer("üìù <b>–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è:</b>", parse_mode="HTML", reply_markup=cancel_menu())

@dp.message(RegStates.creating_announcement_text)
async def ann_create_finish(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await on_start(message, state)
        return
    data = await state.get_data()
    title = data.get("title")
    text = message.text.strip()
    conn, c = db_connect()
    # –°–æ–∑–¥–∞—ë–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
    c.execute(
        "INSERT INTO announcements (title, text, creator_id, created_at) VALUES (?, ?, ?, ?)",
        (title, text, message.from_user.id, datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
    )
    ann_id = c.lastrowid
    conn.commit()
    # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–∏–∫–Ω–µ–π–º–æ–º
    c.execute("SELECT user_id FROM users WHERE nickname IS NOT NULL AND nickname != ''")
    users = c.fetchall()
    count = 0
    for (user_id,) in users:
        try:
            await bot.send_message(
                user_id,
                f"üì¢ <b>{title}</b>\n\n{text}\n\n"
                "<i>–û—Ç–º–µ—Ç—å —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å –¥–ª—è —É—á–∞—Å—Ç–∏—è:</i>",
                parse_mode="HTML",
                reply_markup=announcement_response_kb(ann_id)
            )
            count += 1
        except Exception:
            pass
    await message.answer(
        f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –∏–≥—Ä–æ–∫–∞–º!",
        reply_markup=main_menu(is_admin=True)
    )
    conn.close()
    await state.clear()

# --- –û—Ç–≤–µ—Ç –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ ---
@dp.callback_query(F.data.regexp(r"^(ready|notready)_(\d+)$"))
async def announcement_response(call: types.CallbackQuery):
    match = re.match(r"^(ready|notready)_(\d+)$", call.data)
    status, ann_id = match.group(1), int(match.group(2))
    user_id = call.from_user.id
    conn, c = db_connect()
    c.execute("SELECT id FROM announcements WHERE id=?", (ann_id,))
    ann_exist = c.fetchone()
    if not ann_exist:
        await call.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        conn.close()
        return
    c.execute(
        "INSERT OR REPLACE INTO announcement_responses (announcement_id, user_id, status) VALUES (?, ?, ?)",
        (ann_id, user_id, "ready" if status == "ready" else "not_ready")
    )
    conn.commit()
    await call.answer("–û—Ç–≤–µ—Ç —É—á—Ç—ë–Ω!", show_alert=True)
    conn.close()

# --- –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º) ---
@dp.message(F.text == "üìÑ –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
async def list_participants(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    conn, c = db_connect()
    c.execute("SELECT COUNT(*) FROM announcements")
    total = c.fetchone()[0]
    if total == 0:
        await message.answer("–ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")
        return
    await show_announcement_participants(message, 1, total)

async def show_announcement_participants(message, page, total):
    conn, c = db_connect()
    c.execute("SELECT id, title, text FROM announcements ORDER BY id DESC LIMIT 1 OFFSET ?", (page-1,))
    row = c.fetchone()
    if not row:
        await message.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")
        return
    ann_id, title, text = row
    msg = f"üì¢ <b>{title}</b>\n{text}\n\n"
    msg += f"–°—Ç—Ä–∞–Ω–∏—Ü–∞: <b>{page}</b> –∏–∑ <b>{total}</b>\n"
    msg += "‚Äî‚Äî‚Äî\n"
    c.execute(
        "SELECT u.nickname, u.username, u.user_id, r.status "
        "FROM users u "
        "LEFT JOIN announcement_responses r "
        "ON u.user_id = r.user_id AND r.announcement_id=? "
        "WHERE u.nickname IS NOT NULL AND u.nickname != '' "
        "ORDER BY u.nickname", (ann_id,)
    )
    players = c.fetchall()
    if not players:
        msg += "–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤."
    else:
        for nickname, username, user_id, status in players:
            status_text = "‚úÖ –ì–æ—Ç–æ–≤" if status == "ready" else ("‚ùå –ù–µ –≥–æ—Ç–æ–≤" if status == "not_ready" else "‚Äî")
            msg += f"<b>{nickname}</b> | @{username or '–Ω–µ—Ç'} | <code>{user_id}</code> ‚Äî {status_text}\n"
    kb = announcements_pagination_kb(page, total)
    await message.answer(msg, parse_mode="HTML", reply_markup=kb)
    conn.close()

@dp.callback_query(F.data.regexp(r"^ann_page_(\d+)$"))
async def ann_page_callback(call: types.CallbackQuery):
    page = int(call.data.split("_")[-1])
    conn, c = db_connect()
    c.execute("SELECT COUNT(*) FROM announcements")
    total = c.fetchone()[0]
    conn.close()
    await show_announcement_participants(call.message, page, total)
    await call.answer()

# --- –û—Ç–º–µ–Ω–∞ –≤–µ–∑–¥–µ ---
@dp.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_any(message: Message, state: FSMContext):
    await on_start(message, state)

# --- –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
if __name__ == "__main__":
    add_admin(ADMIN_ID)
    asyncio.run(dp.start_polling(bot))
