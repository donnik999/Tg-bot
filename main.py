import asyncio
import re
import sqlite3
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

API_TOKEN = '8099941356:AAFyHCfCt4jVkmXQqdIC3kufKj5f0Wg969o'
ADMIN_ID = 6712617550

bot = Bot(API_TOKEN)
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class RegStates(StatesGroup):
    waiting_for_nick = State()
    editing_nick = State()
    admin_add_id = State()
    admin_remove_id = State()

# --- –†–∞–±–æ—Ç–∞ —Å –ë–î ---
def db_connect():
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute('CREATE TABLE IF NOT EXISTS users (user_id INTEGER PRIMARY KEY, nickname TEXT, username TEXT)')
    c.execute('CREATE TABLE IF NOT EXISTS admins (user_id INTEGER PRIMARY KEY)')
    conn.commit()
    return conn, c

def is_admin(user_id):
    if user_id == ADMIN_ID:
        return True
    conn, c = db_connect()
    c.execute('SELECT user_id FROM admins WHERE user_id=?', (user_id,))
    result = c.fetchone()
    conn.close()
    return bool(result)

def add_admin(user_id):
    conn, c = db_connect()
    c.execute('INSERT OR IGNORE INTO admins (user_id) VALUES (?)', (user_id,))
    conn.commit()
    conn.close()

def remove_admin(user_id):
    if user_id == ADMIN_ID:
        return
    conn, c = db_connect()
    c.execute('DELETE FROM admins WHERE user_id=?', (user_id,))
    conn.commit()
    conn.close()

def main_menu(is_admin=False):
    kb = [
        [KeyboardButton(text="üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")],
        [KeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º")]
    ]
    if is_admin:
        kb.append([KeyboardButton(text="üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")])
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

def admin_menu():
    kb = [
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞")],
        [KeyboardButton(text="‚ûñ –°–Ω—è—Ç—å –∞–¥–º–∏–Ω–∞")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
    ]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

def cancel_menu():
    kb = [[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

def is_valid_nick(nick):
    return bool(re.fullmatch(r'[A-Za-z0-9]+_[A-Za-z0-9]+', nick))

@dp.message(Command("start"))
async def on_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ —Å–º–µ–Ω—ã –Ω–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.",
        reply_markup=main_menu(is_admin=is_admin(message.from_user.id))
    )

@dp.message(F.text == "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
async def registration_start(message: Message, state: FSMContext):
    await state.set_state(RegStates.waiting_for_nick)
    await message.answer(
        "–í–≤–µ–¥–∏ –Ω–∏–∫–Ω–µ–π–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ò–º—è_–§–∞–º–∏–ª–∏—è (–ª–∞—Ç–∏–Ω–∏—Ü–∞, _ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω):",
        reply_markup=cancel_menu()
    )

@dp.message(RegStates.waiting_for_nick)
async def registration_finish(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await on_start(message, state)
        return
    nickname = message.text.strip()
    if not is_valid_nick(nickname):
        await message.answer(
            "‚ùå –ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å '_' (–ø—Ä–∏–º–µ—Ä: Ivan_Ivanov). –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏ '–û—Ç–º–µ–Ω–∞':"
        )
        return
    conn, c = db_connect()
    c.execute(
        'INSERT OR REPLACE INTO users (user_id, nickname, username) VALUES (?, ?, ?)',
        (message.from_user.id, nickname, message.from_user.username or "")
    )
    conn.commit()
    conn.close()
    await message.answer(
        f"‚úÖ –ù–∏–∫–Ω–µ–π–º {nickname} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!",
        reply_markup=main_menu(is_admin=is_admin(message.from_user.id))
    )
    await state.clear()

@dp.message(F.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º")
async def edit_nick_start(message: Message, state: FSMContext):
    await state.set_state(RegStates.editing_nick)
    await message.answer(
        "–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ò–º—è_–§–∞–º–∏–ª–∏—è (–ª–∞—Ç–∏–Ω–∏—Ü–∞, _ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω):",
        reply_markup=cancel_menu()
    )

@dp.message(RegStates.editing_nick)
async def edit_nick_finish(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await on_start(message, state)
        return
    nickname = message.text.strip()
    if not is_valid_nick(nickname):
        await message.answer(
            "‚ùå –ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å '_' (–ø—Ä–∏–º–µ—Ä: Ivan_Ivanov). –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏ '–û—Ç–º–µ–Ω–∞':"
        )
        return
    conn, c = db_connect()
    c.execute(
        'UPDATE users SET nickname=?, username=? WHERE user_id=?',
        (nickname, message.from_user.username or "", message.from_user.id)
    )
    conn.commit()
    conn.close()
    await message.answer(
        f"‚úÖ –ù–∏–∫–Ω–µ–π–º –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {nickname}!",
        reply_markup=main_menu(is_admin=is_admin(message.from_user.id))
    )
    await state.clear()

@dp.message(F.text == "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await state.clear()
    await message.answer("–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏:", reply_markup=admin_menu())

@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞")
async def add_admin_start(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await state.set_state(RegStates.admin_add_id)
    await message.answer("–í–≤–µ–¥–∏ user_id –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω—ã:", reply_markup=cancel_menu())

@dp.message(RegStates.admin_add_id)
async def add_admin_finish(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await admin_panel(message, state)
        return
    try:
        user_id = int(message.text.strip())
        add_admin(user_id)
        await message.answer(f"‚úÖ –ê–¥–º–∏–Ω {user_id} –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=admin_menu())
        await state.clear()
    except Exception:
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏ —á–∏—Å–ª–æ–≤–æ–π user_id –∏–ª–∏ '–û—Ç–º–µ–Ω–∞'.", reply_markup=cancel_menu())

@dp.message(F.text == "‚ûñ –°–Ω—è—Ç—å –∞–¥–º–∏–Ω–∞")
async def remove_admin_start(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await state.set_state(RegStates.admin_remove_id)
    await message.answer("–í–≤–µ–¥–∏ user_id –¥–ª—è —Å–Ω—è—Ç–∏—è –∏–∑ –∞–¥–º–∏–Ω–æ–≤:", reply_markup=cancel_menu())

@dp.message(RegStates.admin_remove_id)
async def remove_admin_finish(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await admin_panel(message, state)
        return
    try:
        user_id = int(message.text.strip())
        remove_admin(user_id)
        await message.answer(f"‚úÖ –ê–¥–º–∏–Ω {user_id} —Å–Ω—è—Ç.", reply_markup=admin_menu())
        await state.clear()
    except Exception:
        await message.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏ —á–∏—Å–ª–æ–≤–æ–π user_id –∏–ª–∏ '–û—Ç–º–µ–Ω–∞'.", reply_markup=cancel_menu())

@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def back_from_admin(message: Message, state: FSMContext):
    await on_start(message, state)

if __name__ == "__main__":
    add_admin(ADMIN_ID)
    asyncio.run(dp.start_polling(bot))
