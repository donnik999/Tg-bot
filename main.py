import asyncio
import re
import sqlite3
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    FSInputFile
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

API_TOKEN = '8099941356:AAFyHCfCt4jVkmXQqdIC3kufKj5f0Wg969o'  # <-- –í–°–¢–ê–í–¨ –°–í–û–ô –¢–û–ö–ï–ù!
ADMIN_ID = 6712617550  # <-- –í–°–¢–ê–í–¨ –°–í–û–ô user_id

bot = Bot(API_TOKEN)
dp = Dispatcher()

# --- FSM States ---
class RegStates(StatesGroup):
    waiting_for_nick = State()
    editing_nick = State()

# --- DB ---
def db_connect():
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute('CREATE TABLE IF NOT EXISTS users (user_id INTEGER PRIMARY KEY, nickname TEXT, username TEXT)')
    c.execute('CREATE TABLE IF NOT EXISTS admins (user_id INTEGER PRIMARY KEY)')
    conn.commit()
    return conn, c

def is_admin(user_id):
    if user_id == ADMIN_ID:
        return True
    conn, c = db_connect()
    c.execute('SELECT user_id FROM admins WHERE user_id=?', (user_id,))
    result = c.fetchone()
    conn.close()
    return bool(result)

def add_admin(user_id):
    conn, c = db_connect()
    c.execute('INSERT OR IGNORE INTO admins (user_id) VALUES (?)', (user_id,))
    conn.commit()
    conn.close()

def main_menu(is_admin=False):
    kb = [
        [KeyboardButton(text="üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")],
        [KeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º")],
        [KeyboardButton(text="üë• –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ —Å –Ω–∏–∫–Ω–µ–π–º–æ–º")]
    ]
    if is_admin:
        kb.append([KeyboardButton(text="üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ")])
        kb.append([KeyboardButton(text="üìÑ –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")])
        kb.append([KeyboardButton(text="üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")])  # –í—Å–µ–≥–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π!
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

def cancel_menu():
    kb = [[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

def is_valid_nick(nick):
    return bool(re.fullmatch(r'[A-Za-z0-9]+_[A-Za-z0-9]+', nick))

# --- Handlers ---

@dp.message(Command("start"))
async def on_start(message: Message, state: FSMContext):
    await state.clear()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
    photo = FSInputFile("welcome.jpg")
    await message.answer_photo(
        photo,
        caption="üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BIZWAR BOT!</b>\n\n"
                "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, —Å–º–µ–Ω–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º –∏ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∏–≥—Ä–∞—Ö.\n"
                "–ü–æ–ª—å–∑—É–π—Å—è –º–µ–Ω—é –Ω–∏–∂–µ ‚Äî –æ–Ω–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–≤–æ–∏—Ö –ø—Ä–∞–≤.\n\n"
                "<i>–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –ø–∏—à–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.</i>",
        parse_mode='HTML'
    )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_menu(is_admin=is_admin(message.from_user.id))
    )

@dp.message(F.text == "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
async def registration_start(message: Message, state: FSMContext):
    await state.set_state(RegStates.waiting_for_nick)
    await message.answer(
        "‚úçÔ∏è <b>–í–≤–µ–¥–∏ –Ω–∏–∫–Ω–µ–π–º</b> –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>–ò–º—è_–§–∞–º–∏–ª–∏—è</code> (–ª–∞—Ç–∏–Ω–∏—Ü–∞, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ _):",
        parse_mode='HTML',
        reply_markup=cancel_menu()
    )

@dp.message(RegStates.waiting_for_nick)
async def registration_finish(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await on_start(message, state)
        return
    nickname = message.text.strip()
    if not is_valid_nick(nickname):
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞!</b> –ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>–ò–º—è_–§–∞–º–∏–ª–∏—è</code> –ª–∞—Ç–∏–Ω–∏—Ü–µ–π. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏ '–û—Ç–º–µ–Ω–∞'.",
            parse_mode='HTML'
        )
        return
    conn, c = db_connect()
    c.execute(
        'INSERT OR REPLACE INTO users (user_id, nickname, username) VALUES (?, ?, ?)',
        (message.from_user.id, nickname, message.from_user.username or "")
    )
    conn.commit()
    conn.close()
    await message.answer(
        f"‚úÖ <b>–ù–∏–∫–Ω–µ–π–º {nickname} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!</b>",
        parse_mode='HTML',
        reply_markup=main_menu(is_admin=is_admin(message.from_user.id))
    )
    await state.clear()

@dp.message(F.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º")
async def edit_nick_start(message: Message, state: FSMContext):
    await state.set_state(RegStates.editing_nick)
    await message.answer(
        "‚úçÔ∏è <b>–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º</b> –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>–ò–º—è_–§–∞–º–∏–ª–∏—è</code> (–ª–∞—Ç–∏–Ω–∏—Ü–∞, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ _):",
        parse_mode='HTML',
        reply_markup=cancel_menu()
    )

@dp.message(RegStates.editing_nick)
async def edit_nick_finish(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await on_start(message, state)
        return
    nickname = message.text.strip()
    if not is_valid_nick(nickname):
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞!</b> –ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>–ò–º—è_–§–∞–º–∏–ª–∏—è</code> –ª–∞—Ç–∏–Ω–∏—Ü–µ–π. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏ '–û—Ç–º–µ–Ω–∞'.",
            parse_mode='HTML'
        )
        return
    conn, c = db_connect()
    c.execute(
        'UPDATE users SET nickname=?, username=? WHERE user_id=?',
        (nickname, message.from_user.username or "", message.from_user.id)
    )
    conn.commit()
    conn.close()
    await message.answer(
        f"‚úÖ <b>–ù–∏–∫–Ω–µ–π–º –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {nickname}!</b>",
        parse_mode='HTML',
        reply_markup=main_menu(is_admin=is_admin(message.from_user.id))
    )
    await state.clear()

@dp.message(F.text == "üë• –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ —Å –Ω–∏–∫–Ω–µ–π–º–æ–º")
async def list_players(message: Message, state: FSMContext):
    conn, c = db_connect()
    c.execute("SELECT nickname, username, user_id FROM users WHERE nickname IS NOT NULL AND nickname != ''")
    rows = c.fetchall()
    conn.close()
    if not rows:
        await message.answer("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        return
    msg = "üë• <b>–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤:</b>\n"
    msg += "\n".join(
        [f"<b>{row[0]}</b> | @{row[1] or '–Ω–µ—Ç'} | <code>{row[2]}</code>" for row in rows]
    )
    await message.answer(msg, parse_mode='HTML')

# --- –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
if __name__ == "__main__":
    add_admin(ADMIN_ID)
    asyncio.run(dp.start_polling(bot))
