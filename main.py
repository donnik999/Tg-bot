import asyncio
import re
import sqlite3
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton, Message,
    ReplyKeyboardMarkup, KeyboardButton
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

API_TOKEN = '8099941356:AAFyHCfCt4jVkmXQqdIC3kufKj5f0Wg969o'
ADMIN_ID = 6712617550  # —Ç–≤–æ–π Telegram ID

bot = Bot(API_TOKEN)
dp = Dispatcher()

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class RegStates(StatesGroup):
    waiting_for_nick = State()
    editing_nick = State()
    waiting_for_announce = State()

# --- –†–∞–±–æ—Ç–∞ —Å –ë–î ---
def db_connect():
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            nickname TEXT,
            username TEXT
        )
    ''')
    c.execute('''
        CREATE TABLE IF NOT EXISTS responses (
            user_id INTEGER,
            nickname TEXT,
            username TEXT,
            response TEXT,
            announcement_id INTEGER,
            PRIMARY KEY (user_id, announcement_id)
        )
    ''')
    c.execute('''
        CREATE TABLE IF NOT EXISTS announcements (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            text TEXT
        )
    ''')
    conn.commit()
    return conn, c

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∏–∫–Ω–µ–π–º–∞ ---
def is_valid_nick(nick):
    return bool(re.fullmatch(r'[A-Za-z0-9]+_[A-Za-z0-9]+', nick))

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
def main_menu(is_admin=False):
    kb = [
        [KeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å")],
        [KeyboardButton(text="üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")],
        [KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∏–∫–Ω–µ–π–º")]
    ]
    if is_admin:
        kb.append([KeyboardButton(text="üì¢ –°–¥–µ–ª–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")])
        kb.append([KeyboardButton(text="üë• –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")])
        kb.append([KeyboardButton(text="üìÑ –°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")])  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
    kb.append([KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

# --- –ö–æ–º–∞–Ω–¥–∞ /start, –∫–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" ---
@dp.message(Command("start"))
@dp.message(F.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
@dp.message(F.text == "üöÄ –ù–∞—á–∞—Ç—å")
async def send_welcome(message: Message):
    is_admin = message.from_user.id == ADMIN_ID
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç!\n\n"
        "–¢—ã –ø–æ–ø–∞–ª –≤ –±–æ—Ç–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ë–∏–∑–í–∞—Ä–∞ ‚öîÔ∏èüèÜ\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ ‚¨áÔ∏è",
        reply_markup=main_menu(is_admin),
        parse_mode="HTML"
    )

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ---
@dp.message(F.text == "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
async def registration_start(message: Message, state: FSMContext):
    await message.answer(
        "‚úçÔ∏è –ü—Ä–∏–¥—É–º–∞–π —Å–µ–±–µ –Ω–∏–∫–Ω–µ–π–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–ò–º—è_–§–∞–º–∏–ª–∏—è</b> (—Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü–∞, –∑–Ω–∞–∫ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è _ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ).\n\n–í–≤–µ–¥–∏ —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:",
        parse_mode="HTML"
    )
    await state.set_state(RegStates.waiting_for_nick)

@dp.message(RegStates.waiting_for_nick)
async def registration_finish(message: Message, state: FSMContext):
    nickname = message.text.strip()
    if not is_valid_nick(nickname):
        await message.answer("‚ùå –ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å '_' (–Ω–∞–ø—Ä–∏–º–µ—Ä: Sander_Kligan). –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:")
        return
    conn, c = db_connect()
    c.execute('INSERT OR REPLACE INTO users (user_id, nickname, username) VALUES (?, ?, ?)',
              (message.from_user.id, nickname, message.from_user.username or ""))
    conn.commit()
    conn.close()
    await message.answer(f"‚úÖ –ù–∏–∫–Ω–µ–π–º <b>{nickname}</b> —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!", parse_mode="HTML", reply_markup=main_menu(message.from_user.id == ADMIN_ID))
    await state.clear()

# --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∏–∫–Ω–µ–π–º ---
@dp.message(F.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∏–∫–Ω–µ–π–º")
async def edit_nick_start(message: Message, state: FSMContext):
    await message.answer(
        "üîÑ –í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–ò–º—è_–§–∞–º–∏–ª–∏—è</b> (—Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü–∞, –∑–Ω–∞–∫ _ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):",
        parse_mode="HTML"
    )
    await state.set_state(RegStates.editing_nick)

@dp.message(RegStates.editing_nick)
async def edit_nick_finish(message: Message, state: FSMContext):
    nickname = message.text.strip()
    if not is_valid_nick(nickname):
        await message.answer("‚ùå –ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å '_' (–Ω–∞–ø—Ä–∏–º–µ—Ä: Sander_Kligan). –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:")
        return
    conn, c = db_connect()
    c.execute('UPDATE users SET nickname = ?, username = ? WHERE user_id = ?', (nickname, message.from_user.username or "", message.from_user.id))
    conn.commit()
    conn.close()
    await message.answer(f"‚úÖ –ù–∏–∫–Ω–µ–π–º –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ <b>{nickname}</b>!", parse_mode="HTML", reply_markup=main_menu(message.from_user.id == ADMIN_ID))
    await state.clear()

# --- –°–¥–µ–ª–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞) ---
@dp.message(F.text == "üì¢ –°–¥–µ–ª–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
async def announce_start(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.reply("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:")
    await state.set_state(RegStates.waiting_for_announce)

@dp.message(RegStates.waiting_for_announce)
async def announce_send(message: Message, state: FSMContext):
    text = message.text
    conn, c = db_connect()
    # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
    c.execute('INSERT INTO announcements (text) VALUES (?)', (text,))
    announcement_id = c.lastrowid
    # —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    c.execute('SELECT user_id, nickname, username FROM users')
    users = c.fetchall()
    conn.commit()
    conn.close()
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üü¢ –ì–æ—Ç–æ–≤", callback_data=f"ready_{announcement_id}"),
            InlineKeyboardButton(text="üî¥ –ù–µ –≥–æ—Ç–æ–≤", callback_data=f"notready_{announcement_id}")
        ]
    ])
    for uid, nick, username in users:
        await bot.send_message(uid,
            f"üì¢ <b>–û–±—ä—è–≤–ª–µ–Ω–∏–µ:</b>\n{text}\n\n"
            "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ üëá",
            parse_mode="HTML",
            reply_markup=kb
        )
    await message.answer("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º!", reply_markup=main_menu(True))
    await state.clear()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ ---
@dp.callback_query(F.data.regexp(r'(ready|notready)_(\d+)'))
async def handle_announce_response(callback_query: types.CallbackQuery):
    response_type, announcement_id = callback_query.data.split("_")
    conn, c = db_connect()
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∏–∫ –∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    c.execute('SELECT nickname, username FROM users WHERE user_id = ?', (callback_query.from_user.id,))
    user = c.fetchone()
    nickname = user[0] if user else ""
    username = user[1] if user else callback_query.from_user.username or ""
    c.execute(
        'INSERT OR REPLACE INTO responses (user_id, nickname, username, response, announcement_id) VALUES (?, ?, ?, ?, ?)',
        (callback_query.from_user.id, nickname, username, response_type, int(announcement_id))
    )
    conn.commit()
    conn.close()
    await callback_query.answer("–°–ø–∞—Å–∏–±–æ, –æ—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç!")

# --- –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞) ---
@dp.message(F.text == "üë• –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
async def show_ready_list(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    conn, c = db_connect()
    # –ü–æ–ª—É—á–∞–µ–º id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    c.execute('SELECT id FROM announcements ORDER BY id DESC LIMIT 1')
    last = c.fetchone()
    if not last:
        await message.reply("‚ùó –ü–æ–∫–∞ –Ω–µ –±—ã–ª–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")
        conn.close()
        return
    announcement_id = last[0]
    # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∫—Ç–æ –Ω–∞–∂–∞–ª "–ì–æ—Ç–æ–≤"
    c.execute('''
        SELECT nickname, username, user_id
        FROM responses
        WHERE response = "ready" AND announcement_id = ?
    ''', (announcement_id,))
    users = c.fetchall()
    conn.close()
    if not users:
        await message.reply("‚ùó –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è.")
        return
    text = "üü¢ <b>–ì–æ—Ç–æ–≤—ã –∫ —Å–æ–±—ã—Ç–∏—é:</b>\n\n"
    for nick, username, uid in users:
        user_info = f"{nick} | @{username if username else uid}"
        text += f"‚Ä¢ {user_info}\n"
    await message.reply(text, parse_mode="HTML")

# --- –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞) ---
@dp.message(F.text == "üìÑ –°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def show_registered_users(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    conn, c = db_connect()
    c.execute('SELECT nickname, username, user_id FROM users')
    users = c.fetchall()
    conn.close()
    if not users:
        await message.reply("‚ùó –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    text = "<b>–°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
    for nick, username, uid in users:
        user_info = f"{nick} | @{username if username else uid}"
        text += f"‚Ä¢ {user_info}\n"
    await message.reply(text, parse_mode="HTML")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == "__main__":
    asyncio.run(dp.start_polling(bot))
